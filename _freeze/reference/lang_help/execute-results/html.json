{
  "hash": "7e737ddad1fe6fb7285bced1de7da1eb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Translates help\"\nexecute:\n  eval: true\n  freeze: true\n---\n\n## lang_help\n\n## Description\nTranslates a given topic into a target language. It uses the `lang` argument to determine which language to translate to. If not passed, this function will look for a target language in the LANG and LANGUAGE environment variables to determine the target language. If the target language is English, no translation will be processed, so the help returned will be the original package's documentation.\n\n\n## Usage\n```r\n\nlang_help(topic, package = NULL, lang = NULL, type = getOption(\"help_type\"))\n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| topic | The topic to search for |\n| package | The R package to look for the topic |\n| lang | Language to translate the help to |\n| type | Produce \"html\" or \"text\" output for the help. It default to `getOption(\"help_type\")` |\n\n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\n  library(lang)\n  \n  lang_use(\"ollama\", \"llama3.2\", seed = 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$backend\n[1] \"ollama\"\n\n$model\n[1] \"llama3.2\"\n\n$.cache\n[1] \"/var/folders/y_/f_0cx_291nl0s8h26t4jg6ch0000gp/T//Rtmpy0WvEn/_lang_cache2dc0638d49ab\"\n\n$args\n$args$seed\n[1] 100\n```\n\n\n:::\n\n```{.r .cell-code}\n  lang_help(\"predict\", lang = \"spanish\", type = \"text\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nTranslating: \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nTranslating: Title\nTranslating: Title\nTranslating: Title\nTranslating: Title\nTranslating: Title\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n_\bP_\br_\be_\bd_\bi_\bc_\bc_\bi_\bo_\bn_\be_\bs _\bd_\be_\bl _\bM_\bo_\bd_\be_\bl_\bo\n\n_\bD_\be_\bs_\bc_\br_\bi_\bp_\bt_\bi_\bo_\bn:\n\n     Es una función genérica para predicciones de los resultados de\n     diferentes funciones de ajuste de modelos. La función invoca\n     métodos específicos_ que dependen del tipo_ de la primera variable\n     de entrada.\n\n_\bU_\bs_\ba_\bg_\be:\n\n     predict(object, ...)\n     \n_\bA_\br_\bg_\bu_\bm_\be_\bn_\bt_\bs:\n\n  object: Objeto del modelo para el cual se desea realizar una\n          predicción.\n\n     ...: Argümentos adicionales que afectan las predicciones\n          producidas.\n\n_\bD_\be_\bt_\ba_\bi_\bl_\bs:\n\n     Los métodos de predicción que son similares a los para modelos\n     lineales tienen un argumento 'newdata' que indica la primera lugar\n     donde buscar variables explicativas para hacer predicciones.  Se\n     hacen algunos intentos considerables para alinear las columnas de\n     'newdata' con aquellas utilizadas para encajar, por ejemplo, que\n     tengan el mismo tipo y que los mismos factores tengan el mismo\n     nivel establecido en la misma posición (o pueden ser transformados\n     para que lo sean).\n\n     Los métodos de predicción de series temporales en paquete 'stats'\n     tienen un argumento 'n.ahead' que indica cuántas tiempo laspasados\n     para hacer predicciones.\n\n     Muchos métodos tienen una variable lógica 'se.fit' indicando si se\n     devolverán los errores estándar.\n\n_\bV_\ba_\bl_\bu_\be:\n\n     La forma del valor devuelto por 'predict' depende de la clase de\n     su argumento.  Ver la documentación de los métodos particulares\n     para detalles sobre lo producido por ese método.\n\n_\bR_\be_\bf_\be_\br_\be_\bn_\bc_\be_\bs:\n\n     Chambers, J. M. and Hastie, T. J. (1992) _Statistical Models in\n     S_.  Wadsworth & Brooks/Cole.\n\n_\bS_\be_\be _\bA_\bl_\bs_\bo:\n\n     Predicción segura para predicción de (polinomiales) y ajustes de\n     spline.\n\n     Para predicciones de series temporales, 'predicir.ar',\n     'predicir.Arima','predicir.arima0', 'predicir.HoltWinters',\n     'predicir.StructTS'.\n\n_\bE_\bx_\ba_\bm_\bp_\bl_\be_\bs:\n\n     require(utils)\n     \n     ## All the \"predict\" methods found\n     ## NB most of the methods in the standard packages are hidden.\n     ## Output will depend on what namespaces are (or have been) loaded.\n     \n     for(fn in methods(\"predict\"))\n        try({\n            f <- eval(substitute(getAnywhere(fn)$objs[[1]], list(fn = fn)))\n            cat(fn, \":\\n\\t\", deparse(args(f)), \"\\n\")\n            }, silent = TRUE)\n     \n```\n\n\n:::\n:::\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}